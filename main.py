# main.py (version finale avec ordre corrig√©)
import logging
from datetime import datetime
import csv

from core import config_loader, profil
from core import scoring, blacklist
from defi_sources import defillama
import simulateur_wallet
import real_wallet


def main():
    # Initialiser le logging d√®s le d√©but
    logging.basicConfig(
        filename="logs/journal.log",
        level=logging.INFO,
        format="%(asctime)s %(levelname)s %(message)s"
    )

    logging.info("üîÅ D√©marrage d‚Äôun nouveau cycle d‚Äôanalyse DeFiPilot")

    # Charger la configuration
    config_loader.charger_config()
    print("DEBUG: mode_reel =", config_loader.get("mode_reel", False))

    # Lecture du mode r√©el depuis la config (apr√®s chargement)
    mode_reel = config_loader.get("mode_reel", False)

    # Journaliser s√©par√©ment le mode actif dans mode.log
    with open("logs/mode.log", "a") as mode_file:
        mode_file.write(f"{datetime.now().isoformat()} | mode_reel = {mode_reel}\n")

    if mode_reel:
        print("\n‚ùó‚ùó‚ùó ATTENTION : MODE R√âEL ACTIV√â ‚ùó‚ùó‚ùó")
        logging.info("‚ö†Ô∏è Mode r√©el activ√© ‚Äî attention, des transactions pourraient √™tre effectu√©es.")
    else:
        logging.info("üîí Mode r√©el d√©sactiv√© ‚Äî ex√©cution en simulation uniquement.")

    adresse_wallet = real_wallet.detecter_adresse_wallet()
    if adresse_wallet:
        logging.info(f"üîë Adresse EVM d√©tect√©e : {adresse_wallet}")
    else:
        logging.warning("‚ö†Ô∏è Aucune adresse de wallet d√©tect√©e.")

    profil_defaut = config_loader.get("profil_defaut", "mod√©r√©")
    ponderations = profil.charger_ponderations(profil_defaut)
    logging.info(f"üèó Profil actif : {profil_defaut} "
                 f"(APR {ponderations['apr']}, TVL {ponderations['tvl']})")

    pools = defillama.recuperer_pools()
    if not pools:
        logging.warning("Aucune pool r√©cup√©r√©e. Fin du cycle.")
        return

    pools_filtrees = blacklist.filtrer_blacklist(pools)
    pools_notees = scoring.calculer_scores(pools_filtrees, ponderations)
    top3 = sorted(pools_notees, key=lambda x: x['score'], reverse=True)[:3]

    print("\nüèÜ TOP 3 POOLS S√âLECTIONN√âES :")
    for i, pool in enumerate(top3, start=1):
        dex = pool.get("plateforme", "N/A")
        pair = pool.get("nom", "N/A")
        tvl = pool.get("tvl_usd", 0)
        apr = pool.get("apr", 0)
        score = pool.get("score", 0)

        print(f"{i}. {dex} | {pair} | TVL: {tvl} | APR: {apr} | SCORE: {score}")

        logging.info(f"TOP {i} | {dex} | {pair} | TVL: {tvl} | APR: {apr} | Score: {score}")


if __name__ == "__main__":
    main()
